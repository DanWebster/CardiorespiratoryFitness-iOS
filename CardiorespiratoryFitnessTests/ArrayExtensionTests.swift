//
//  ArrayExtensionTests.swift
//  CardiorespiratoryFitnessTests
//
//  Copyright Â© 2018-2019 Sage Bionetworks. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// 1.  Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2.  Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.
//
// 3.  Neither the name of the copyright holder(s) nor the names of any contributors
// may be used to endorse or promote products derived from this software without
// specific prior written permission. No license is granted to the trademarks of
// the copyright holders even if such marks are included in this software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

import XCTest
@testable import CardiorespiratoryFitness


/// Mathlab tests for old algorithm - leaving in b/c some of the array extensions might prove
/// useful for other projects.
class ArrayExtensionTests: XCTestCase {

    override func setUp() {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }
    
    func testXCorr() {
        let input = Array(1...10).map { Double($0) }
        
        let output = xcorr(input)
        let expectedAnswer: [Double] = [10.0, 29.0, 56.0, 90.0, 130.0, 175.0, 224.0, 276.0, 330.0, 385.0, 330.0, 276.0, 224.0, 175.0, 130.0, 90.0, 56.0, 29.0, 10.0]
        XCTAssertEqual(output, expectedAnswer)
    }
    
    func testConv() {
        let u = Array(1...10).map { Double($0) }
        let v = Array(1...15).map { Double($0) }
        
        let output1 = conv(u, v, .same)
        let expectedAnswer1: [Double] = [120, 165, 220, 275, 330, 385, 440, 495, 534, 556]
        XCTAssertEqual(output1, expectedAnswer1)
        
        let output2 = conv(v, u, .same)
        let expectedAnswer2: [Double] = [56, 84, 120, 165, 220, 275, 330, 385, 440, 495, 534, 556, 560, 545, 510]
        XCTAssertEqual(output2, expectedAnswer2)
        
        let input1 = u.zeroPadBefore(count: 9)
        let input2 = u.zeroPadAfter(count: 9)
        
        let expectedAnswer3: [Double] = [1.0, 4.0, 10.0, 20.0, 35.0, 56.0, 84.0, 120.0, 165.0, 220.0, 264.0, 296.0, 315.0, 320.0, 310.0, 284.0, 241.0, 180.0, 100.0]
        let conv_nopad = conv(u, u)
        let conv_pad = conv(input1, input2, .same)
        XCTAssertEqual(conv_nopad, expectedAnswer3)
        XCTAssertEqual(conv_pad, expectedAnswer3)
    }
    
    func testNormalizedValues() {
        let red = Array(red_input[..<600])
        
        let meanValue = red.mean()
        let output = red.map { ($0 - meanValue) }
        let expectedOutput = getNormalizedValues()
        
        if output.count == expectedOutput.count {
            for (ii, value) in output.enumerated() {
                XCTAssertEqual(value, expectedOutput[ii], accuracy: 0.0001, "\(ii)")
            }
        } else {
            XCTAssertEqual(output.count, expectedOutput.count)
        }
    }
}
    
// Helper methods
let red_input = getRedInput()
func getRedInput() -> [Double] {
    let bundle = Bundle(for: ArrayExtensionTests.self)
    let fileURL = bundle.url(forResource: "red_input_1d", withExtension: "txt")!
    let redString = try! String(contentsOf: fileURL, encoding: .utf8)
    let red = redString.components(separatedBy: .whitespaces).map { ($0 as NSString).doubleValue }
    return red
}

func getNormalizedValues() -> [Double] {
    return [-0.31679831, -0.21804003, -0.13910255, -0.15089802, -0.08039895, 0.04746165, 0.12719020, 0.11255523, 0.09702375, 0.08151963, 0.06598344, 0.05040654, 0.03411081, 0.01824518, 0.00641748, 0.00614514, 0.00540903, 0.00546160, 0.00522693, 0.00463870, 0.00494995, 0.00509735, 0.00534596, 0.00552913, 0.00569102, 0.00579121, 0.00605144, 0.00625362, 0.00655510, 0.00655487, 0.00567558, 0.00434741, 0.00349727, 0.00301459, 0.00293561, 0.00303628, 0.00317218, 0.00335571, 0.00361928, 0.00382944, 0.00416949, 0.00443306, 0.00475534, 0.00516190, 0.00531557, 0.00531825, 0.00545933, 0.00529923, 0.00522795, 0.00518336, 0.00502946, 0.00496581, 0.00497069, 0.00510868, 0.00536188, 0.00562468, 0.00581803, 0.00592389, 0.00595006, 0.00606003, 0.00615170, 0.00630840, 0.00653639, 0.00669595, 0.00689199, 0.00710162, 0.00729063, 0.00735291, 0.00754436, 0.00771674, 0.00813850, 0.00814542, 0.00791290, 0.00680473, 0.00596406, 0.00541236, 0.00516918, 0.00514498, 0.00541642, 0.00566640, 0.00602701, 0.00632944, 0.00652322, 0.00693002, 0.00714120, 0.00742134, 0.00766077, 0.00773319, 0.00767823, 0.00765350, 0.00757476, 0.00742921, 0.00742646, 0.00744792, 0.00762221, 0.00776871, 0.00789519, 0.00806531, 0.00834342, 0.00860497, 0.00883999, 0.00907906, 0.00929114, 0.00952204, 0.00976911, 0.00987383, 0.01003858, 0.01024225, 0.01028528, 0.01030513, 0.01051106, 0.01047977, 0.01051208, 0.01039984, 0.01007035, 0.00910344, 0.00824686, 0.00772294, 0.00740685, 0.00730809, 0.00740238, 0.00741025, 0.00755831, 0.00782498, 0.00804963, 0.00829920, 0.00858887, 0.00884517, 0.00909980, 0.00925686, 0.00931408, 0.00935301, 0.00923827, 0.00924733, 0.00924417, 0.00923326, 0.00934716, 0.00938579, 0.00965526, 0.00971940, 0.00989797, 0.01000013, 0.00998356, 0.01021274, 0.01031371, 0.01037320, 0.01053556, 0.01059493, 0.01068284, 0.01075562, 0.01083150, 0.01089337, 0.01094874, 0.01085206, 0.01105710, 0.01075264, 0.01013693, 0.00908925, 0.00820270, 0.00772967, 0.00749680, 0.00735625, 0.00734999, 0.00746503, 0.00756570, 0.00759360, 0.00769844, 0.00781509, 0.00815221, 0.00834205, 0.00850567, 0.00855263, 0.00842580, 0.00829407, 0.00820317, 0.00802466, 0.00804284, 0.00807800, 0.00819149, 0.00821521, 0.00822713, 0.00814565, 0.00823911, 0.00843998, 0.00850853, 0.00855275, 0.00870075, 0.00872853, 0.00884404, 0.00898173, 0.00912454, 0.00918540, 0.00925049, 0.00932553, 0.00932064, 0.00910106, 0.00837114, 0.00731971, 0.00671854, 0.00626203, 0.00630625, 0.00627812, 0.00642052, 0.00659927, 0.00692376, 0.00718352, 0.00730582, 0.00757112, 0.00769504, 0.00774273, 0.00792118, 0.00804862, 0.00792631, 0.00790271, 0.00799497, 0.00800052, 0.00830158, 0.00827839, 0.00862076, 0.00870528, 0.00862982, 0.00867315, 0.00861498, 0.00874033, 0.00894984, 0.00909140, 0.00892248, 0.00899907, 0.00908145, 0.00907143, 0.00911232, 0.00915178, 0.00933673, 0.00953146, 0.00959333, 0.00919946, 0.00827309, 0.00743147, 0.00685253, 0.00659051, 0.00646629, 0.00662919, 0.00656512, 0.00668093, 0.00687655, 0.00686094, 0.00705680, 0.00714823, 0.00734206, 0.00723901, 0.00726339, 0.00714447, 0.00699189, 0.00690075, 0.00688019, 0.00679001, 0.00671794, 0.00677332, 0.00668480, 0.00675949, 0.00675424, 0.00671478, 0.00663933, 0.00661232, 0.00676789, 0.00683083, 0.00705394, 0.00703194, 0.00702026, 0.00701173, 0.00707945, 0.00702616, 0.00693479, 0.00690701, 0.00693663, 0.00659224, 0.00592669, 0.00494584, 0.00431564, 0.00404503, 0.00391998, 0.00381150, 0.00371244, 0.00380411, 0.00379982, 0.00380006, 0.00381442, 0.00377294, 0.00374737, 0.00366648, 0.00364354, 0.00344398, 0.00335976, 0.00311794, 0.00311615, 0.00281521, 0.00278869, 0.00271931, 0.00264885, 0.00265183, 0.00263228, 0.00269344, 0.00281897, 0.00280830, 0.00272282, 0.00254651, 0.00261416, 0.00253721, 0.00255015, 0.00264760, 0.00262424, 0.00264969, 0.00274768, 0.00264069, 0.00269344, 0.00241431, 0.00184389, 0.00090280, 0.00029501, -0.00004224, -0.00039396, -0.00044314, -0.00030330, -0.00038037, -0.00023637, -0.00026271, -0.00007556, 0.00011208, 0.00025454, 0.00025543, 0.00025430, 0.00014671, 0.00001171, -0.00013653, -0.00024895, -0.00031910, -0.00033430, -0.00038014, -0.00034324, -0.00032953, -0.00037924, -0.00037209, -0.00033114, -0.00024293, -0.00014744, -0.00002102, -0.00008795, -0.00008736, -0.00003973, -0.00002477, 0.00012037, 0.00019922, 0.00017985, 0.00019118, 0.00009170, 0.00001415, -0.00001190, -0.00012264, -0.00079522, -0.00154958, -0.00220463, -0.00256888, -0.00275896, -0.00285730, -0.00270913, -0.00260238, -0.00261924, -0.00255582, -0.00250081, -0.00244216, -0.00231991, -0.00223402, -0.00242398, -0.00246892, -0.00253902, -0.00277767, -0.00286332, -0.00287048, -0.00294856, -0.00297502, -0.00289229, -0.00296185, -0.00290284, -0.00285373, -0.00278709, -0.00261883, -0.00275431, -0.00264005, -0.00269357, -0.00254474, -0.00242738, -0.00225834, -0.00212601, -0.00215939, -0.00211535, -0.00209353, -0.00205884, -0.00200651, -0.00210640, -0.00201569, -0.00209264, -0.00219933, -0.00271843, -0.00355587, -0.00421635, -0.00464658, -0.00473712, -0.00473312, -0.00478534, -0.00473598, -0.00456963, -0.00453047, -0.00443027, -0.00438604, -0.00439451, -0.00435672, -0.00433383, -0.00445000, -0.00446860, -0.00467900, -0.00478838, -0.00477067, -0.00491444, -0.00486711, -0.00480804, -0.00487665, -0.00490979, -0.00496439, -0.00499353, -0.00499890, -0.00505153, -0.00494758, -0.00508378, -0.00509802, -0.00518159, -0.00526021, -0.00530139, -0.00529937, -0.00543008, -0.00557021, -0.00540308, -0.00540886, -0.00539229, -0.00548974, -0.00546489, -0.00591598, -0.00671969, -0.00759206, -0.00821070, -0.00874231, -0.00881050, -0.00905482, -0.00901429, -0.00891194, -0.00897298, -0.00898389, -0.00897387, -0.00888155, -0.00888518, -0.00887642, -0.00896958, -0.00905261, -0.00930909, -0.00953434, -0.00963090, -0.00961117, -0.00972191, -0.00971011, -0.00973061, -0.00959150, -0.00962046, -0.00953249, -0.00959674, -0.00949982, -0.00949577, -0.00950608, -0.00933543, -0.00926945, -0.00914226, -0.00895844, -0.00893245, -0.00882409, -0.00875083, -0.00882897, -0.00878850, -0.00876579, -0.00874499, -0.00854883, -0.00846032, -0.00869951, -0.00933824, -0.01005969, -0.01061378, -0.01094434, -0.01106516, -0.01102457, -0.01097313, -0.01102248, -0.01086900, -0.01075605, -0.01054058, -0.01048861, -0.01017330, -0.01006219, -0.00993577, -0.01001099, -0.01022241, -0.01042042, -0.01048217, -0.01046536, -0.01036642, -0.01025102, -0.01010076, -0.01002756, -0.00989041, -0.00973437, -0.00952969, -0.00942472, -0.00921015, -0.00918303, -0.00915352, -0.00913987, -0.00902168, -0.00889198, -0.00868229, -0.00859795, -0.00851706, -0.00841234, -0.00834117, -0.00832096, -0.00834308, -0.00825594, -0.00822840, -0.00817201, -0.00836173, -0.00895617, -0.00985513, -0.01049564, -0.01086966, -0.01099876, -0.01090417, -0.01091991, -0.01079420, -0.01073144, -0.01065562, -0.01052687, -0.01040558, -0.01028810, -0.01020393, -0.01014051, -0.01003907, -0.01008407, -0.01022378, -0.01030932, -0.01035640, -0.01042358, -0.01035950, -0.01043747, -0.01037899, -0.01036618, -0.01026771, -0.01032171, -0.01017509, -0.01006446, -0.00997845, -0.00990049, -0.00984660, -0.00989548, -0.00983671, -0.00970588, -0.00963167, -0.00963292, -0.00956414, -0.00957904, -0.00955895, -0.00945059, -0.00941447, -0.00933096, -0.00936762, -0.00986019, -0.01075403, -0.01155499, -0.01194874, -0.01227442, -0.01226578, -0.01220748, -0.01217482, -0.01221768, -0.01195172, -0.01185796, -0.01179782, -0.01151506, -0.01141319, -0.01138935, -0.01130233, -0.01140175, -0.01162264, -0.01181451, -0.01202593, -0.01221327]
}
